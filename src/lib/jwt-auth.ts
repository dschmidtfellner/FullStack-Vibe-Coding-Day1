import jwt from 'jsonwebtoken';

// JWT payload interface - what Bubble will send
export interface JWTPayload {
  userId: string;        // Bubble user ID
  name: string;          // User's display name
  email?: string;        // Optional email
  role: string;          // User role (parent, provider, admin, etc.)
  childIds: string[];    // Array of child IDs this user can access
  exp?: number;          // Token expiration
  iat?: number;          // Token issued at
}

// User context interface - what our app will use
export interface BubbleUser {
  id: string;
  name: string;
  email?: string;
  role: string;
  childIds: string[];
  isAuthenticated: boolean;
}

// For now, we'll use a simple secret. In production, this should be:
// 1. Generated by your Bubble app
// 2. Shared securely between Bubble and this chat app
// 3. Rotated regularly for security
const JWT_SECRET = process.env.VITE_JWT_SECRET || 'your-bubble-jwt-secret-change-this';

/**
 * Validate and decode a JWT token from Bubble
 */
export function validateJWTToken(token: string): BubbleUser | null {
  try {
    // Decode and verify the token
    const decoded = jwt.verify(token, JWT_SECRET) as JWTPayload;
    
    // Validate required fields
    if (!decoded.userId || !decoded.name || !decoded.role || !Array.isArray(decoded.childIds)) {
      console.error('Invalid JWT payload: missing required fields');
      return null;
    }
    
    // Return user object
    return {
      id: decoded.userId,
      name: decoded.name,
      email: decoded.email,
      role: decoded.role,
      childIds: decoded.childIds,
      isAuthenticated: true,
    };
  } catch (error) {
    console.error('JWT validation failed:', error);
    return null;
  }
}

/**
 * Create a test JWT token (for development/testing)
 * This simulates what Bubble would generate
 */
export function createTestJWTToken(payload: Omit<JWTPayload, 'iat' | 'exp'>): string {
  return jwt.sign(
    {
      ...payload,
      iat: Math.floor(Date.now() / 1000),
      exp: Math.floor(Date.now() / 1000) + (60 * 60 * 24), // 24 hours
    },
    JWT_SECRET
  );
}

/**
 * Parse JWT token from URL parameters
 */
export function getTokenFromURL(): string | null {
  const urlParams = new URLSearchParams(window.location.search);
  return urlParams.get('token');
}

/**
 * Create test users for development
 */
export function createTestUsers() {
  return {
    parent1: createTestJWTToken({
      userId: 'parent_1',
      name: 'Sarah Johnson',
      email: 'sarah@example.com',
      role: 'parent',
      childIds: ['child_123']
    }),
    parent2: createTestJWTToken({
      userId: 'parent_2', 
      name: 'Mike Wilson',
      email: 'mike@example.com',
      role: 'parent',
      childIds: ['child_456']
    }),
    provider: createTestJWTToken({
      userId: 'provider_1',
      name: 'Dr. Lisa Chen',
      email: 'lisa@clinic.com',
      role: 'provider',
      childIds: ['child_123', 'child_456', 'child_789']
    }),
    admin: createTestJWTToken({
      userId: 'admin_1',
      name: 'Admin User',
      email: 'admin@example.com', 
      role: 'admin',
      childIds: ['child_123', 'child_456', 'child_789', 'child_999']
    })
  };
}